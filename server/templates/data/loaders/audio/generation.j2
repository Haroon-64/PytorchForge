

class AudioGenerationDataset(Dataset):
    def __init__(self, root, split='{{ split | default("train") }}', duration={{ duration | default(5.0) }}, include_prompt={{ include_prompt | default("True") }}, include_target={{ include_target | default("True") }}, audio_pair={{ audio_pair | default("False") }}, text_pair={{ text_pair | default("False") }}, return_format='{{ return_format | default("dict") }}'):
        self.root = Path(root) / split
        self.sample_rate = 16000
        self.clip_samples = int(duration * self.sample_rate)
        self.include_prompt = include_prompt
        self.include_target = include_target
        self.audio_pair = audio_pair
        self.text_pair = text_pair
        self.return_format = return_format
        self.data = self._load_data()

    def _load_data(self):
        {% if audio_pair %}
        return list((self.root / 'input').glob('*.wav'))
        {% elif text_pair %}
        return list((self.root / 'text').glob('*.txt'))
        {% else %}
        return list((self.root / 'prompt').glob('*.wav'))
        {% endif %}

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        item = {}
        {% if audio_pair %}
        in_path = self.data[idx]
        out_path = Path(str(in_path).replace('input', 'target'))
        item['prompt'] = torchaudio.load(in_path)[0][:, :self.clip_samples]
        item['target'] = torchaudio.load(out_path)[0][:, :self.clip_samples]
        {% elif text_pair %}
        txt_path = self.data[idx]
        audio_path = Path(str(txt_path).replace('text', 'target').replace('.txt', '.wav'))
        item['prompt'] = txt_path.read_text().strip()
        item['target'] = torchaudio.load(audio_path)[0][:, :self.clip_samples]
        {% else %}
        audio_path = self.data[idx]
        item['prompt'] = torchaudio.load(audio_path)[0][:, :self.clip_samples]
        {% endif %}

        {% if self.return_format == 'tuple' %}
        return tuple(item.values())
        {% elif return_format == 'raw' %}
        return item['prompt']
        {% else %}
        return item
        {% endif %}

def get_loader(root, batch_size=8, split='train', shuffle=True, **kwargs):
    dataset = AudioGenerationDataset(root=root, split=split, **kwargs)
    return DataLoader(dataset, batch_size=batch_size, shuffle=shuffle)
