
class ImageClassificationDataset(Dataset):
    def __init__(self, root, split='{{ split | default("train") }}', label_type='{{ label_type | default("folder-name") }}', label_map={{ label_map | default("None") }}, return_format='{{ return_format | default("dict") }}', split_type='{{ split_type | default("include") }}'):
        self.root = Path(root) / split
        self.label_map = {{ label_map | default("self._infer_label_map()") }}
        self.return_format = return_format
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor()
        ])
        self.data = self._load_data()

    def _infer_label_map(self):
        classes = sorted([d.name for d in self.root.iterdir() if d.is_dir()])
        return {cls: i for i, cls in enumerate(classes)}

    def _load_data(self):
        items = []
        for cls in self.label_map:
            for img_path in (self.root / cls).glob('*.jpg'):
                items.append((img_path, self.label_map[cls]))
        return items

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        img_path, label = self.data[idx]
        image = self.transform(Image.open(img_path).convert("RGB"))

        {% if self.return_format == 'tuple' %}
        return image, label
        {% elif return_format == 'raw' %}
        return image
        {% else %}
        return {'image': image, 'label': label}
        {% endif %}

def get_loader(root, batch_size=32, split='train', shuffle=True, **kwargs):
    dataset = ImageClassificationDataset(root=root, split=split, **kwargs)
    return DataLoader(dataset, batch_size=batch_size, shuffle=shuffle)
