
class ImageGenerationDataset(Dataset):
    def __init__(self, root, split='{{ split | default("train") }}', return_format='{{ return_format | default("dict") }}', include_prompt={{ include_prompt | default("True") }}, include_target={{ include_target | default("True") }}, text_pair={{ text_pair | default("True") }}, split_type='{{ split_type | default("include") }}'):
        self.root = Path(root) / split
        self.include_prompt = include_prompt
        self.include_target = include_target
        self.text_pair = text_pair
        self.return_format = return_format
        self.transform = transforms.Compose([
            transforms.Resize((256, 256)),
            transforms.ToTensor()
        ])
        self.data = self._load_data()

    def _load_data(self):
        if self.text_pair:
            prompt_files = sorted((self.root / 'prompt').glob('*.txt'))
            return [(p, Path(str(p).replace('prompt', 'target').replace('.txt', '.jpg'))) for p in prompt_files]
        else:
            return list((self.root / 'target').glob('*.jpg'))

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        {% if text_pair %}
        prompt_path, image_path = self.data[idx]
        prompt = prompt_path.read_text().strip()
        image = self.transform(Image.open(image_path).convert("RGB"))
        {% else %}
        prompt = None
        image = self.transform(Image.open(self.data[idx]).convert("RGB"))
        {% endif %}

        {% if self.return_format == 'tuple' %}
        return (prompt, image) if prompt else (image,)
        {% elif return_format == 'raw' %}
        return image
        {% else %}
        out = {'image': image}
        {% if prompt %}
        out['prompt'] = prompt
        {% endif %}
        return out
        {% endif %}

def get_loader(root, batch_size=16, split='train', shuffle=True, **kwargs):
    dataset = ImageGenerationDataset(root=root, split=split, **kwargs)
    return DataLoader(dataset, batch_size=batch_size, shuffle=shuffle)
